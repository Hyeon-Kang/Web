Cloud API 프로젝트

API 활용 필요성(목적)

Cloud의 모든 자원을 Console을 이용하지 않고 프로그램을 통해 자동으로 처리 (Cloud API)
자동이란 궁극적으로는 제공된 자원에 대한 단순 조작이 아닌 현 자원현황을 파악하고 개선된 환경을 제안 및 변경

OAuth2.0

client = 애플리케이션 제공자
resource owner = 사용자(User)
resource server = API를 통해 리소스를 제공 (구글의 리소스 저장 서버)
authorization server = 인증 담당 서버

리소스 서버와 인증 서버는 같은 서버일 수도 있음

Resourc Server 등록

Client ID, Client Secret, Authorized rediret URLs 필요

client : client id, client secret
resource server : client id, client secret, redirect URL

Resource Owner(User) - Client - Resource Server



Resource Owner 는 Resource Server 와 통신하며
Client가 어느 권한을 요구한는지 데이터 전달 및 허가를 구함

(Resource Server와 Authorization Server를 동일하다는 가정 하에 진행)
RS는 RO의 id와 secret 값을 받고 authorization code를 발급해준다.
RO는 client와 교신하여 id, secret, authorization code를 전해주고
Client는 RO에게 받은 세 값 RS에게 전달, RS는 (id, secret, url, auth code)가
일치함을 확인하면 Access token을 발급 후 client에게 응답해준다.
RS가 발급한 AccessToekn은 접근한 유저에 대한 Client 접근 권한을 보장한다.

[]참고 자료] https://opentutorials.org/course/3405/22010
AccessToken은 수명 제한이 있다. 수명이 끝나면 api는 위와 같은 인증 과정을 새로 요구하게 되는데
이런 과정이 너무 번거롭기 때문에 RefreshToken 개념이 있다.

1.2.  Protocol Flow

     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+

                     Figure 1: Abstract Protocol Flow

               출처 : https://tools.ietf.org/html/rfc6749


Access Token과 Refresh Token은 대체로 동시에 발급해wnsek.

어느 날 평소와 같이 Access Token으로 접근을 하던 중 유효기간 오류가 출력된다면
토큰을 새로 갱신해주어야 한다.

Refreshing an access token

사용 예시?

api_url_query?access_token={actoken}

OAuth 2.0 guide
출처 : https://developers.google.com/identity/protocols/OAuth2WebServer


ex)
Google's OAuth 2.0 endpoint is at https://accounts.google.com/o/oauth2/v2/auth.
This endpoint is accessible only over HTTPS. Plain HTTP connections are refused.

The Google authorization server supports the following query string parameters
for web server applications:

https://accounts.google.com/o/oauth2/v2/auth?
 scope = https % 3A // www.googleapis.com / auth / drive.metadata.readonly &
 access_type = offline &
 include_granted_scopes = true &
 state = state_parameter_passthrough_value &
 redirect_uri = https % 3A // oauth2.example.com / callback &
 response_type = code &
 client_id = 클라이언트 _id



ex) Access Code Response
https://oauth2.example.com/auth?code=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7

생활코딩 api 접속 참고링크 : https://www.youtube.com/watch?v=9vh4VGjaMco

HTTP get 접근 예시
참고 링크 (google api document):
https://developers.google.com/identity/protocols/OAuth2WebServer#http-get-examples
>> https://www.googleapis.com/drive/v2/files?access_token=<access_token>
