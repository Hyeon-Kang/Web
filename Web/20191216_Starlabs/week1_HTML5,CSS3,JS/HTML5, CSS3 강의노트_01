
25. CSS transform
    영상이 좀 부실한편. 디테일한 정보는 따로 찾아볼 것
    참고 학습링크 : https://www.youtube.com/watch?v=7FsVqPutd4A&list=PLG7te9eYUi7uvROuVChYgAL5pMK7gnWSp&index=26

    변형(transform)

    _01 scale 함수 : 지정한 크기만큼 요소를 확대/축소
                    transform:scale(sx, sy) -> 2차원
                    transform:scale3d(sx, sy, sz) -> 3차원 공간의 요소 확대/축소
                    transform:scaleX(sx) -> x 축 방향으로 확대축소
                    transform:scaleY(sy) -> y 축 방향으로 확대축소
                    transform:scaleZ(sz) -> z 축 방향으로 확대축소

                    인자로 소숫점도 받을 수 있다.


    _02 rotate 함수
            transform:rotate(rx, ry, 각도)
            transform:rotate3d(rx, ry, rz, 각도)
            transform:rotateX(각도)
            transform:rotateY(각도)
            transform:rotateZ(각도)


    _03 skew 함 : 지정 각도만큼 오브젝트를 비틀어 왜곡시킨다.
            transform:skew(aw,ay)
            transform:skewX(ax)
            transform:skewY(ay)

            ex)
            <style>
                .skewx1 { transform: skewX(30deg); }
                .skewx2 { transform: skewY(-25deg)}
            </style>

            <div class="origin">
                <div class="skewx1"><img src ="image.jpg"></div>
            </div>
            <div class="origin">
                <div class="skewx2"><img src ="image.jpg"></div>
            </div>


    _04 원근감 옵션 perspective
        perspective: <크기> | none; /* 값이 클 수록 멀리 있는 것처럼 보인다. */


26. CSS 트랜지션 : 웹 요소의 스타일 속성이 조금씩 자연스럽게 바뀌는 것

    어떤 것이 있을까?
        - 예) 도형 위에 마우스를 올려놓으면 도형의 색이 변함
        - 예) 도형 위에 마우스를 올려놓으면 도형의 모양이 변함

    트랜지션의 옵션들
        transition-property 트랜지션 대상 설정
        transition-duration 트랜지션 진행 시간 설정
        transition-timing-function 트랜지션 속도 곡선을 설정
        transition-delay 트랜지션 지연 시간을 설정
        transition 위의 속성들을 한꺼번에 설정


    transition-property
        트랜지션을 적용할 속성 선택
        이 속성을 지정하지 않으면 모든 속성이 적용 대상이 됨

        transition-property: all | none | <속성 이름>

            ex)
            transition-property: all; /* 해당 요소의 모든 속성에 트랜지션 적용 */
            transition-property: background-color; /* 해당 요소의 배경 색에 트랜지션 적용 */
            transition-property: width, height; /* 해당 요소의 너비와 높이에 트랜지션 적용 */


    transition-duration
        트랜지션 진행 시간 설정
        시간 단위는 초(seconds) or 밀리초(milliseconds)
        트랜지션이 여러 개라면 쉼표(,)를 사용하여 진행시간 지정

        ex)
        <style>
        .tr1 {
            width: 100px; /* 너비 */
            height: 100px; /* 높이 */
            background-color: blue; /* 배경색 */
            border: 1px solid back; /* 테두리 */
            transition-property : width, height; /* 너비와 높이를 트랜지션 대상으로 지정 */
            transition-du : 2s, 1s; /* 너비는 2초동안, 높이는 1초동안 변화 */

            /* 얼마나 변화하는지는 따로 기술해야 함 */
        }

        .tr1:hover {
            width:200px;
            height:120px;
        }
        </style>


    transition-timing-function
        트랜지션의 시작과 중간, 끝에서의 속도 지정

        transition-timing-function: linear | ease | ease-in | ease-out | cubic-bezier(n, n, n, n)

        옵션이 좀 많다.
        linear : 시작부터 끝까지 일정한 속도로 트랜지션 진행
        ease : 처음엔 천천히, 점차 빨라지다가 마지막엔 천천히 (기본값!)
        ease-in : 느리게 시작
        ease-out : 느리게 끝냄
        ease-in-out : 느리게 시작하고 느리게 끝냄
        cubic-bezier(n, n, n, n) : 베지에 함수, n의 값은 0~1


    transition-delay
        트랜지션 시작 전 지연시간 설정

        transition-del : 1s;


CSS 트랜지션 & 애니메이션
    @keyframes



27. 반응형 웹 디자인 (중요!)
    참조 링크 : https://www.youtube.com/watch?v=a8dP3HIkw_o&list=PLG7te9eYUi7uvROuVChYgAL5pMK7gnWSp&index=27

    화면 크기에 '반응'하여 화면 요소들을 자동으로 바꾸어 사이트를 구현


    뷰포트(viewport) : 실제 내용이 표시되는 영역
        PC 화면과 모바일 화면의 픽셀 표시방법이 다르기 때문에 의도한대로 나오지 않는다.

        뷰포트를 지정하면 기기 화면에 맞추어 조절됨

        - 뷰포트 지정하기
            <head> 태그 안에서 <meta> 태그를 이용해 뷰포트 지정

            외부 예시를 보자
            퍼블리싱 참조링크 : http://www.nextree.co.kr/p8622/
            코드 참조링크 : https://www.codingfactory.net/10534

            <meta name="viewport" content="width=device-width, initial-scale=1">
            뷰포트 너비를 디바이스 폭으로 맞추고 초기 scale을 1로 설정

    반응형 웹을 만드는 몇가지 방법?
        - 가변 그리드 레이아웃
        - 미디어 쿼리
        - 플렉서블 박스



    가변 그리드 레이아웃
        - 그리드 시스템 : 화면을 여러 column으로 나누어 재배치
          column 개수에 따라 나누기도 함. 주로 960 픽셀 12 column 그리드 시스템을 사용한다.

        - 고정 그리드 레이아웃
            각 영역의 값을 고정함. 이러면 반응형 웹이 아닌가?

            ex)
            <style>
            #wrapper {
                width:960;
                margin:0 auto;
            }
            header {
                width: 960px;
                height:120px;
            }
            .content {
                float:left;
                width:600px;
            }
            .right-side {
                float:right;
                width:300px;
            }
            footer {
                clear:both;
                width:960px;
            }
            </style>

        - 가변 그리드 레이아웃
            고정 그리드의 문제를 해결하기 위해 고정된 픽셀값이 아닌 백분율 값을 넣었다.

            ex)
            <style>
            #wrapper {
                width:96%;
                margin:0 auto;
            }
            header {
                width: 100%;
                height:120px;
            }
            .content {
                float:left;
                width:62.5%;
                height:400px;
                padding:1.5625%;
                background-color:#ffd800;
            }
            .right-side {
                float:right;
                width:31.25%;
                height:400px;
                padding:1.5625%;
                background-color:#00ff90;
            }
            footer {
                clear:both;
                width:100%;
                height:120px;
                background-color:#c3590a;
            }
            </style>


            ** 각 요소의 너비 백분율 구하는 팁
            (요소의 너비 / 콘텐츠 전체를 감싸는 요소의 너비) * 100

            위에서 보았던 고정형 그리드 레이아웃의 콘텐츠 비율을 구해보자
            ( 600px / 960px ) * 100


    가변 요소 다루기

        - 가변 글꼴
            em 단위
            rem 단위

        - 가변 이미지
            CSS 활용
            ex) 이미지를 감싼 부모요소만큼 커지거나 작아지도록 max-width 속성 값을 100%로 지정
            <style>
                .content img {
                    max-width:100%;
                    height:auto;
                }
            </style>

            ** 모바일에서 축소된 이미지가 보인다고 용량도 경감되지 않는다. 과도한 데이터 사용 문제

            이런 문제를 해결하기 위해 <video> 태그처럼 여러 타입의 자료를 상황에 따라 가져올 수 있도록 옵션이 있다.

            1) <img> 태그 srcset

                srcset의 경우 화면 너비 값이나 픽셀 밀도에 따라 고해상도 이미지 지정 가능

                ex) <img src="aaa.jpg" srcset="aaa_hd.jpg 2x">


            2) <picture> & <source> 태그

                ex)
                <picture>
                    <source srcset="large_img.jpg" media="(min-width:1024px)">
                    <source srcset="medium_img.jpg" media="(min-width:768px)">
                    <source srcset="small_img.jpg" media="(min-width:320px)">
                    <img src = "img.jpg" alt="" style="width:100%";>
                </picture>


        - 가변 비디오
            ex)
            <style>
                video { max-width: 100%; }
            </style>

            <video autoplay loop src="assets/cars.mp4"></video>




27. 반응형 웹 만들기 - 미디어 쿼리

    가장 많이 사용되는 방법
    접속 장치에 따라 특정 css 스타일을 사용하도록 함

    미디어 쿼리 구문
    @media 미디어 유형 and 조건 and 조건

    사용 가능한 유형 옵션
    all(모두), print(인쇄장치?), screen(화면), tv(?) 등...

    ex) screen 유형 최소 너비 200px, 최대 너비 360px 인 경우 적용할 css 구문
    @media screen and (min-width:200px) and (max-width;360px) {
        ...
    }


    실제로 여러 화면의 경우에 대해 어떻게 구축하는지 보자.

    <style>
    body { /* 좀 많이 큰 경우? */
        background: url(images/bg0.jpg) no-repeat fixed;
        background-size: cover;
    }

    /* 데스크탑 */
    @media screen and (max-width:1024px) {
        body {
            background: url(images/bg1.jpg) no-repeat fixed;
            background-size: cover;
        }
    }

    @media screen and (max-width:768px) {
        body {
            background: url(images/bg2.jpg) no-repeat fixed;
            background-size: cover;
        }
    }

    @media screen and (max-width:320px) {
        body {
            background: url(images/bg3.jpg) no-repeat fixed;
            background-size: cover;
        }
    }
    </style>


    미디어 쿼리 조건

        - 단말기의 가로 너비와 세로 높이
            단말기의 가로, 세로 값을 설정하는 속성
            device-width, device-height : 단말기의 가로 너비, 세로 높이
            min-device-width, min-device-height : 단말기의 최소 너비, 최소 높이
            max-device-width, max-device-height : 단말기의 쵀대 너비, 최대 높이

            단말기 크기와 뷰포트 크기를 하나로 통일하기 위해 뷰포트 지정 시  width = "device-width"로 놓고 사용한다. (초기 값 다들 저렇게 쓰는 이유)



        - 화면 회전 (가로 모드로 보는 경우)
            orientation 속성을 사용하여 화면 방향을 체크한다.

            orientation: portrait(초상화, 세로방향) | landscape(경치, 가로방향)

            ex)
            <style>
            /* 가로모드인 경우 백그라운드 오랜지색 */
            @media screen and (orientation:landscape) {
                body {background-color:orange;}
            }

            /* 세로모드인 경우 백그라운드 노란색 */
            @media screen and (orientation:portrait) {
                body {background-color:yellow;}
            }
            </style>


        - 화면 비율
        - 단말기 화면 비율
        - 색상당 비트 수

        - 미디어 쿼리 중단점 만들기
            무엇을 기준으로 css 옵션을 바꿀 수 있을까?

            *중단점 (breakpoint) : 서로 다른 CSS를 적용할 화면 크기

            /* 스마트폰 세로 */
            @media only screen and (min-width: 320px) { ... }

            /* 스마트폰 가로 */
            @media only screen and (min-width: 480px) { ... }

            /* 태블릿 세로 */
            @media only screen and (min-width: 768px) { ... }

            /* 태블릿 가로, 데스크톱 */
            @media only screen and (min-width: 1024px) { ... }


    외부 CSS 파일 연결 : 특정 조건에 맞을 경우, 지정한 CSS 파일을 가져와 적용함

    <link> 태그
        css 파일 개수가 많은 경우 link 태그가 더 안정적

    @import 구문

    <style> 태그 안에 직접 구현

    ** 외부 css 스크립트 적용법 참조링크
    https://zetawiki.com/wiki/HTML%EC%97%90_CSS%EB%A5%BC_%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94_%EB%B0%A9%EC%8B%9D_3%EA%B0%80%EC%A7%80



28. 플렉서블 박스 레이아웃
    그리드 레이아웃이 바탕이 됨

    기본 개념
        - 플렉스 컨테이너 : 각 항목들을 컨테이너로 묶어주어야 사용 가능함
        - 플렉스 항목 : 컨테이너에 들어갈 요소
        - 주축 : 항목을 배치할 방향
        - 교차축 : 주축과 직교하는 축

    display 속성 = 플렉스 컨테이너 지정
        display: flex(박스 레벨요소) | iniline-flex(인라인 레벨요소)


        선언 예시
        ex)

        <style>
        #container {
            display:flex; /* 플렉스 컨테이너 지정 */
        }
        </style>

        <div id = "container"> /* 플렉스 컨테이너 클래스 상속 */
            <div></div> /* 플렉스 항목 1 */
            <div></div> /* 플렉스 항목 2 */
        </div>


    *** 브라우저마다 플렉스 박스를 지원하는 방법이 다르다! 브라우저 접두사 필요! ***


    플렉서블 박스 레이아웃 기본 속성
        flex-direction 플렉스 항목 배치 방향 지정

        flex-direction: row | row-inverse | column | column-inverse

        row : 주축을 가로
        row-inverse : 주축은 가로인데 역순(오른쪽 -> 왼쪽)
        column : 주축을 세로
        column-inverse : ...

        flex-direction 속성은 플렉스 컨테이너 클래스에서 정의하면 된다.


        flex-wrap : 요소가 컨테이너 영역을 벗어나면 어떻게 배치해야 하는지 설정

        flex-wrap: no-wrap | wrap | wrap-reverse

        no-wrap : 영역을 벗어나면 한줄로 표 (기본값)
        wrap : 넘어간 항목을 다음줄에 표시
        wrap-reverse : wrap과 반대로 윗줄에 표시

        ** 통상적으로 배치 방향과 줄 배치 방식을 한 번에 설정한다.

        flex-direction, flex-wrap을

        flex-flow: <플렉스 방향> <플렉스 줄 배치>

        ex) flex-flow: row no-wrap;



        order 속성
            플렉스 항목의 배치 순서 바꾸기

            ex) 1, 2, 3 -> 3, 1, 2

            <style>
            #container {
                display:flex;
            }
            #box1 { order:2; }
            #box2 { order:3; }
            #box3 { order:1; }
            </style>

            <div id= "container">
                <div id="box1"><h2>box1</h2></div>
                <div id="box2"><h2>box2</h2></div>
                <div id="box3"><h2>box3</h2></div>
            </div>


        플렉스 항목 가로정렬
            justify-content : flex-start | flex-end | center | space-between | space-around

            flex-start : 주축의 시작부터 배치
            flex-end : 주축의 끝점부터 배치
            center : 주축의 중심부터 배치
            space-between : 시작,중점,끝점 배치
            space-around : 적당히 간격두고 배치 (이거만 쓸듯)


        플렉스 항목 세로정렬
            align-items, align-self


        플렉스 교차죽 기준점 설정
            aligh-content


        플렉스 항목의 크기 조절 (예제 검색해서 할 것!)
            flex: <flex-grow> | <flex-shrink> | <flex=basis> | auto | initial

            꺾쇠로 묶인 옵션은 바이너리로 표현

            ex) 기본값
            flex: 0 1 auto;
